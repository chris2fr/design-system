@use "sass:list";
@use "sass:map";
@use "../../function/string";
@use "../../selector/function/namespace";
@use "../../spacing/function/space";
@use "../setting/spacing";
@use "../setting/text";
@use "../setting/title";
@use "font-face";
@use "styles";

////
/// Core Tool : Typography build
/// @group core
////

@function typography-selector($type, $name, $is-modifier: false, $alt: null) {
  $base: '';
  $separator: '-';

  @if $is-modifier {
    $separator: '--';
  }

  @if $type != heading {
    $base: '#{$type + $separator}';
  }

  $selectors: (namespace.ns('#{$base + $name}'));

  @if $alt != null {
    $selectors: list.append($selectors, namespace.ns('#{$base + $alt}'), 'comma');
  }

  @return $selectors;
}

@mixin build-utillity-typography() {
  @if text.$text-utilities {
    @each $name, $variation in title.$title-settings {
      $type: display;
      @if string.is-heading($name) {
        $type: heading;
      }

      #{typography-selector($type, $name, true, map.get($variation, alt))} {
        @include styles.title-style($name, true, true, null, true);
      }
    }

    #{namespace.ns(text--alt)} {
      @include font-face.font-family(alt, true);
    }
  }

  @if title.$title-utilities {
    @each $name, $variation in text.$text-settings {
      #{typography-selector(text, $name, true, map.get($variation, alt))} {
        @include styles.text-style($name, true, true, null, true);
      }
    }
  }
}

@mixin title-selector() {
  $titles: ();
  @each $name, $variation in title.$title-settings {
    $type: display;
    @if string.is-heading($name) {
      $type: heading;
    }

    $titles: list.append($titles, typography-selector($type, $name, false, map.get($variation, alt)), comma);
  }
  #{$titles} {
    @content;
  }
}

@mixin generate-margin-vars() {
  :root {
    @each $name, $margin in spacing.$text-spacing {
      --#{$name}-spacing: #{space.space($margin)};
    }
  }
}
