@use "sass:list";
@use "sass:map";
@use "../../selector/function/namespace";
@use "../../selector/function/pattern";
@use "../../selector/setting/breakpoint" as setting-breakpoint;
@use "../../selector/tool/breakpoint" as tool-breakpoint;
@use "../../spacing/tool/size";
@use "../../spacing/tool/space";
@use "../setting";
@use "col";

////
/// Core Tool : Grid
/// @group core
////

/// Génère les classes de colonne pour la grille ainsi que les offsets (optionnel)
///
/// @param {Map} $columns [$grid-settings] - configuration de la grille
/// @param {Bool} $with-container [true] - si true, définit les containers
/// @param {Bool} $with-offsets [true] - si true, définit les offsets
///
/// @require {variable} $grid-columns
///
/// @example scss - Génère les colonnes
///   @include grid-generator();
@mixin grid($settings: setting.$grid-settings, $with-container: true, $with-offsets: true) {
  $columns: map.get($settings, columns);
  $breakpoints-settings: map.get(setting.$grid-settings, breakpoints);
  $last-gutter: 0;
  $last-max-width: null;
  $containers: ();
  $row-gutters: ();

  @each $breakpoint, $limits in setting-breakpoint.$breakpoints {
    $mod: '-#{$breakpoint}';

    @if $breakpoint == xs {
      $breakpoint: first;
      $mod: '';
    }

    @include tool-breakpoint.respond-from($breakpoint) {
      $breakpoint-settings: map.get($breakpoints-settings, $breakpoint);
      $gutter: null;
      $max-width: null;

      @if $breakpoint-settings != null {
        $gutter: map.get($breakpoint-settings, gutter);
        $max-width: map.get($breakpoint-settings, max-width);

        @if $gutter != null {
          $last-gutter: $gutter;
        }

        @if $max-width != null {
          $last-max-width: $max-width;
        }
      }

      // Container
      @if $with-container {

        $container: namespace.ns('container' + $mod);

        @if list.length($containers) > 0 {
          #{$containers} {
            @if $gutter != null {
              @include space.padding-x($gutter * 2);
            }

            @if $max-width != null {
              @include size.max-size($max-width + $last-gutter * 4);
            }
          }
        }

        $containers: list.append($containers, $container, 'comma');

        #{$container} {
          @if $last-gutter != 0 {
            @include space.padding-x($last-gutter * 2);
          }

          @if $last-max-width != null {
            @include size.max-size($last-max-width + $last-gutter * 4);
          }
        }

        #{namespace.ns('container' + $mod + '--fluid')} {
          @include space.padding-x(0);
          @include size.max-size(none);
          overflow: hidden;
        }
      }

      // Gutters
      $row-gutter: namespace.ns(grid-row#{$mod}--gutters);
      $g: $last-gutter;

      @if $gutter != null {
        $g: $gutter;
        @if list.length($row-gutters) > 0 {
          #{$row-gutters} {
            @include space.margin(-$g);

            > {
              #{pattern.class-start-with(namespace.ns(col-, ''))},
              #{namespace.ns(col)} {
                @include space.padding($g);
              }
            }
          }
        }
      }

      #{$row-gutter} {
        @include space.margin(-$g);

        > {
          #{pattern.class-start-with(namespace.ns(col-, ''))},
          #{namespace.ns(col)} {
            @include space.padding($g);
          }
        }
      }

      $row-gutters: list.append($row-gutters, $row-gutter, 'comma');

      #{namespace.ns(grid-row + $mod + --no-gutters)} {
        @include space.margin(0);

        > {
          #{pattern.class-start-with(namespace.ns(col-, ''))},
          #{namespace.ns(col)} {
            @include space.padding(0);
          }
        }
      }

      // Cols
      #{namespace.ns('col' + $mod)} {
        flex: 1;
      }

      @for $i from 1 through $columns {
        $append: '#{$mod}-#{$i}';
        #{namespace.ns('col' + $append)} {
          @include col.grid-col($i, $columns);
        }

        @if $with-offsets {
          #{namespace.ns('col-offset' + $append)} {
            @include col.grid-col-offset($i, $columns);
          }
        }
      }
    }
  }
}
