@use "sass:list";
@use "sass:selector";
@use "../function/namespace";
@use "../function/pattern";

////
/// Core Tool : Selector pattern
/// @group core
////

@mixin class-pattern($selector, $unify: true) {
  @if & == null {
    @at-root #{$selector} {
      @content;
    }
  }
  @else if $unify {
    @at-root #{selector.unify(&, $selector)} {
      @content;
    }
  }
  @else {
    #{$selector} {
      @content;
    }
  }
}

@mixin class-contains($unify: true, $patterns...) {

  @if list.length($patterns) == 1 and list.length(list.nth($patterns, 1)) > 1 {
    $patterns: list.nth($patterns, 1);
  }

  $selectors: '';

  @each $pattern in $patterns {
    $selectors: '#{$selectors}[class*="#{$pattern}"]';
  }

  @include class-pattern($selectors, $unify) {
    @content;
  }
}

@mixin class-not-contains($unify: true, $patterns...) {

  @if list.length($patterns) == 1 and list.length(list.nth($patterns, 1)) > 1 {
    $patterns: list.nth($patterns, 1);
  }

  $selectors: '';
  @each $pattern in $patterns {
    $selectors: '#{$selectors}:not([class*="#{$pattern}"])';
  }

  @include class-pattern($selectors, $unify) {
    @content;
  }
}

@mixin class-start-with($start, $unify: true) {
  @include class-pattern(pattern.class-start-with($start), $unify) {
    @content;
  }
}

@mixin class-not-start-with($start, $unify: true) {
  @include class-pattern(pattern.class-not-start-with($start), $unify) {
    @content;
  }
}

@mixin class-end-with($end, $unify: true) {
  @include class-pattern(pattern.class-end-with($end), $unify) {
    @content;
  }
}

@mixin class-not-end-with($end, $unify: true) {
  @include class-pattern(pattern.class-not-end-with($end), $unify) {
    @content;
  }
}

@mixin class-is-ns($unify: true) {
  @include class-start-with(namespace.ns('', ''), $unify) {
    @content;
  }
}

@mixin class-is-not-ns($unify: true) {
  @include class-not-start-with(namespace.ns('', ''), $unify) {
    @content;
  }
}
