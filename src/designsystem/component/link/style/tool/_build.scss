@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "../function";
@use "../setting";
@use "icon";
@use "size";

////
/// Link Tool : build
/// @group link
////

@mixin _link-class($base, $size: md, $place: null, $align-on-content: false, $append: '') {
  $selector: '';
  $base: '#{$base}';

  @if $size != md {
    $selector: '#{$base}--#{$size}';
  }

  @if $align-on-content {
    $selector: '#{$selector}#{$base}--align-on-content';
  }

  @if $place == only {
    @if $selector == '' {
      $selector: '#{$base}';
    }
    $selector: '#{$selector}:not([class*="#{string.slice($base, 2)}--icon-"])';
  }
  @else if $place == left or $place == right {
    $selector: '#{$selector}#{$base}--icon-#{$place}';
  }

  @if $selector == '' {
    $selector: $base;
  }

  @if $append != '' {
    $selector: '#{$selector} #{$append}';
  }

  #{$selector} {
    @if $place != null {
      @include has-icon {
        @content;
      }
    }
    @else {
      @content;
    }
  }
}

@mixin build-link-base {
  @include set-text-margin(0);
  @include set-title-margin(0);
}

@mixin link-display($display) {
  @if $display == flex {
    @include display-flex(row, center, null, null, true);
    width: -moz-fit-content;
    width: fit-content;
    @include _pseudo(before after) {
      display: block;
    }
  }
  @else {
    display: inline;
  }
}

@mixin _build-link($settings) {
  $places: map.get($settings, places);
  $sizes: function.link-sort-sizes(map.get($settings, sizes));
  $border-radius: map.get($settings, border-radius);
  $align-on-content: map.get($settings, align-on-content);
  $base: ns(map.get($settings, selector));
  $underline: map.get($settings, underline);
  $append: map.get($settings, append);

  #{$base} {
    @include build-link-base;
    @include link-display(map.get($settings, display));

    @if $underline != true {
      @include disable-underline;
      @include tint-enabled(true, null);
    }
    @content;
  }

  @if map.get($settings, no-modifier) != true {
    @each $size, $size-settings in $sizes {
      @include _link-class($base, $size, null, false, $append) {
        @include size.build-link-size($size-settings, $border-radius);

        @if map.get($settings, blank) {
          @include target-blank(true) {
            @include icon.build-link-icon($size-settings, right, $size, false);
          }
        }
      }

      @if $align-on-content {
        @include _link-class($base, $size, null, true, $append) {
          @include size.link-align-on-content($size, null, $size-settings);
        }
      }

      @if $places != null {
        @each $place in $places {
          @include _link-class($base, $size, $place, false, $append) {
            @include icon.build-link-icon($size-settings, $place, $size, true);
          }

          @if $align-on-content {
            @include _link-class($base, $size, $place, true, $append) {
              @include size.link-align-on-content($size, $place, $size-settings);
            }
          }
        }

        @if list.index($places, only) == null {
          @include _link-class($base, $size, only, false, $append) {
            @include before(none);
          }
        }
      }
    }
  }
}

@mixin build-link() {
  @include _build-link(setting.$links-settings) {
    @content;
  }
}
